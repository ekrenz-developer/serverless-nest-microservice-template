{"version":3,"file":"src/template/handler.js","mappings":";;;;;;;;;;;;;;;;;;;AAAA,6EAAwC;AACxC,qHAA4D;AAKrD,IAAM,SAAS,uBAAf,MAAM,SAAS;CAAG;oBAAZ,SAAS;IAHrB,mBAAM,EAAC;QACN,OAAO,EAAE,CAAC,gCAAc,CAAC;KAC1B,CAAC;GACW,SAAS,CAAG;;;;;;;;;;;;;;;;;;;;ACNzB,6EAA4C;AAGrC,IAAM,eAAe,6BAArB,MAAM,eAAe;IAC1B,QAAQ;QACN,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC;IAClC,CAAC;IACD,MAAM;QACJ,OAAO,EAAE,IAAI,EAAE,YAAY,EAAE,CAAC;IAChC,CAAC;CACF;0BAPY,eAAe;IAD3B,uBAAU,GAAE;GACA,eAAe,CAO3B;;;;;;;;;;;;;;;;;;;;ACVD,6EAAwC;AACxC,iIAA8D;AAKvD,IAAM,cAAc,4BAApB,MAAM,cAAc;CAAG;yBAAjB,cAAc;IAH1B,mBAAM,EAAC;QACN,SAAS,EAAE,CAAC,kCAAe,CAAC;KAC7B,CAAC;GACW,cAAc,CAAG;;;;;;;;;;;ACN9B;;;;;;;;;;ACAA;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;;;;;;;;;ACtBA,6EAA4C;AAC5C,uEAA2C;AAS3C,oFAAyC;AACzC,0IAAuE;AAEhE,MAAM,UAAU,GAAY,KAAK,EACtC,KAAsB,EAGU,EAAE;IAClC,MAAM,UAAU,GAAG,MAAM,kBAAW,CAAC,wBAAwB,CAAC,sBAAS,CAAC,CAAC;IACzE,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,kCAAe,CAAC,CAAC;IAChD,MAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,EAAE,CAAC;IAEpC,OAAO;QACL,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC9B,UAAU,EAAE,mBAAU,CAAC,EAAE;KAC1B,CAAC;AACJ,CAAC,CAAC;AAbW,kBAAU,cAarB;AAEK,MAAM,QAAQ,GAAY,KAAK,EACpC,KAAsB,EAGU,EAAE;IAClC,MAAM,UAAU,GAAG,MAAM,kBAAW,CAAC,wBAAwB,CAAC,sBAAS,CAAC,CAAC;IACzE,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,kCAAe,CAAC,CAAC;IAChD,MAAM,QAAQ,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC;IAElC,OAAO;QACL,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC;QAC9B,UAAU,EAAE,mBAAU,CAAC,EAAE;KAC1B,CAAC;AACJ,CAAC,CAAC;AAbW,gBAAQ,YAanB","sources":["webpack://serverless-nest-microservice-template/./src/app.module.ts","webpack://serverless-nest-microservice-template/./src/template/services/template.service.ts","webpack://serverless-nest-microservice-template/./src/template/template.module.ts","webpack://serverless-nest-microservice-template/external commonjs \"@nestjs/common\"","webpack://serverless-nest-microservice-template/external commonjs \"@nestjs/core\"","webpack://serverless-nest-microservice-template/webpack/bootstrap","webpack://serverless-nest-microservice-template/./src/template/handler.ts"],"sourcesContent":["import { Module } from '@nestjs/common';\nimport { TemplateModule } from './template/template.module';\n\n@Module({\n  imports: [TemplateModule],\n})\nexport class AppModule {}\n","import { Injectable } from '@nestjs/common';\n\n@Injectable()\nexport class TemplateService {\n  getHello(): { data: string } {\n    return { data: 'Hello world!' };\n  }\n  getBye(): { data: string } {\n    return { data: 'Bye world!' };\n  }\n}\n","import { Module } from '@nestjs/common';\nimport { TemplateService } from './services/template.service';\n\n@Module({\n  providers: [TemplateService],\n})\nexport class TemplateModule {}\n","module.exports = require(\"@nestjs/common\");","module.exports = require(\"@nestjs/core\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { HttpStatus } from '@nestjs/common';\nimport { NestFactory } from '@nestjs/core';\nimport {\n  Callback,\n  Context,\n  Handler,\n  APIGatewayEvent,\n  APIGatewayProxyResult,\n} from 'aws-lambda';\n\nimport { AppModule } from '@/app.module';\nimport { TemplateService } from '@/template/services/template.service';\n\nexport const helloWorld: Handler = async (\n  event: APIGatewayEvent\n  // context: Context,\n  // callback: Callback\n): Promise<APIGatewayProxyResult> => {\n  const appContext = await NestFactory.createApplicationContext(AppModule);\n  const service = appContext.get(TemplateService);\n  const response = service.getHello();\n\n  return {\n    body: JSON.stringify(response),\n    statusCode: HttpStatus.OK,\n  };\n};\n\nexport const byeWorld: Handler = async (\n  event: APIGatewayEvent\n  // context: Context,\n  // callback: Callback\n): Promise<APIGatewayProxyResult> => {\n  const appContext = await NestFactory.createApplicationContext(AppModule);\n  const service = appContext.get(TemplateService);\n  const response = service.getBye();\n\n  return {\n    body: JSON.stringify(response),\n    statusCode: HttpStatus.OK,\n  };\n};\n"],"names":[],"sourceRoot":""}